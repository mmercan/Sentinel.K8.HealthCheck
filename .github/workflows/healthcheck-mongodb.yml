name: Healthcheck MongoDB

on:
  push:
    branches: [master]
    paths:
      - Containers/mongodb/**
      - Helm/sentinel-healthcheck/charts/healthcheck-mongodb/**
  pull_request:
    branches: [master]

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ARTIFACT_PATH: ${{ github.workspace }}
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: View Docker Compose config
        run: |
          docker-compose --file Containers/mongodb/docker-compose.yml --log-level DEBUG config

      - name: Build mongodb Docker Image
        run: |
          docker-compose --file Containers/mongodb/docker-compose.yml --log-level DEBUG build

      - name: tag Images
        run: |
          images=$(cat ./Containers/mongodb/docker-compose.yml | grep 'image: ' | cut -d':' -f 2 | tr -d '"')
          for image in $images 
          do 
            docker tag "${image}":"01-prod-linux" "${image}":"$GITHUB_RUN_ID"
            docker tag "${image}":"01-prod-linux" "${image}":"latest"
          done

      - name: list Images
        run: |
          docker images

      - name: Push Images
        run: |
          images=$(cat ./Containers/mongodb/docker-compose.yml | grep 'image: ' | cut -d':' -f 2 | tr -d '"')
          for image in $images 
          do 
            docker image push --all-tags ${image}
          done
  deploy-dev:
    environment: Dev
    needs: build
    runs-on: ubuntu-latest
    env:
      ARTIFACT_PATH: ${{ github.workspace }}
      IMAGE_NAME: ${{ github.repository }}
      chartName: "healthcheck-mongodb"
      namespace: "sentinel-healthcheck"
      releaseName: "healthcheck-mongodb-dev"
      pipelines_pipeline: '"${{ github.WORKFLOW }}"'
      pipelines_run: ${{ github.RUN_ID }}
      pipelines_org: '"${{ github.SERVER_URL }}"'
      pipelines_repo: ${{ github.repository }}
      pipelines_gitsha: ${{ github.sha }}
      pipelines_branch: ${{ github.ref }}
      pipelines_job: ${{ github.job }}
      pipelines_runuri: '"${{ GITHUB.SERVER_URL }}/${{ GITHUB.REPOSITORY }}/actions/runs/${{ GITHUB.RUN_ID }}"'
      domainName: "${{ secrets.ENV_DOMAIN }}"
      arecord: '"mongodb-${{ secrets.ENV_DOMAIN_PREFIX }}"'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: extract password
        run: |
          IP=$(curl "https://api.happi.dev/v1/generate-password?apikey=${{ secrets.HAPPI_APIKEY }}&limit=1&length=24&num=1&upper=1&symbols=0")
          password=$(jq -n "$IP" | jq .passwords[0] | tr -d '"')
          echo "::add-mask::$password"
          echo "MONGODB_PASSWORD=$(echo $password)" >> $GITHUB_ENV

      - name: Test
        run: echo $MONGODB_PASSWORD

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1.1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
          context: matt-test-aks2

      - name: add KUBECONFIG To env file
        run: |
          cp ${{ env.KUBECONFIG }} /home/runner/work/_temp/config
          ls /home/runner/work/_temp

      - name: Check Helm Version
        run: |
          helm version

      - name: Helm Package
        run: |
          helm package --version 2.0.0-$GITHUB_RUN_ID --destination /home/runner/work/_temp ./Helm/sentinel-healthcheck/charts/$chartName

      - name: Validate Helm Package
        run: |
          helm template "./Helm/sentinel-healthcheck/charts/$chartName" -f "./Helm/values/$chartName/dev-values.yaml"

      - name: Helm upgrade
        run: |
          helm upgrade --namespace $namespace --install \
          --history-max 1 \
          --values ./Helm/values/$chartName/dev-values.yaml \
          --set image.tag=$GITHUB_RUN_ID \
          --set secrets.MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD \
          --set branch=master \
          --wait $releaseName \
          /home/runner/work/_temp/$chartName-2.0.0-$GITHUB_RUN_ID.tgz \

      - name: output env vars
        run: |
          echo  " $ARTIFACT_PATH "
          echo  " $IMAGE_NAME "
          echo  " $chartName "
          echo  " $namespace "
          echo  " $releaseName "
          echo  " $pipelines_pipeline "
          echo  " $pipelines_run "
          echo  " $pipelines_org "
          echo  " $pipelines_repo "
          echo  " $pipelines_gitsha "
          echo  " $pipelines_branch "
          echo  " $pipelines_runuri "
      - name: extractExternalIP
        run: |
          while [ -z $external_ip ]; do
          echo "Waiting for end point..."
          external_ip=$(kubectl get svc $chartName -n $namespace --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
          [ -z "$external_ip" ] && sleep 10
          done
          echo "::add-mask::$external_ip"
          echo 'End point ready:' && echo $external_ip

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIAL_ENTERPRISE }}
          enable-AzPSSession: true

      - name: Azure CLI script
        uses: Azure/cli@v1.0.0
        with:
          inlineScript: |
            az network dns record-set list -g dnsmanagement -z myrcan.com  --query "[?name=='blahtest-dev']"

            az storage -h
